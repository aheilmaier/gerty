#!@PERL@
#  Copyright (C) 2010  Stanislav Sinyagin
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.


# Gerty CLI front-end launcher

use lib(@perllibdirs@);
use strict;
use warnings;
use Getopt::Long;
use Log::Handler;

# command-line comands. This array can be extended by plugins
@Gerty::cli_loadmodules = ('run');

# each command line execution module should register itself here
%Gerty::cmd_registry = ();

# paths to search for devclass INI files.
# lower sequences are searched first
# reserved sequence numbers:
#   100: main Gerty distribution
#   200: plugin distributions may add paths
#   300: siteconfig
%Gerty::devclass_paths = ();
$Gerty::devclass_paths{'@devclassdir@'} = 100;

# External programs, such as SSH and Telnet
%Gerty::external_executables = ();
$Gerty::external_executables{'ssh'} = '@SSH@';
$Gerty::external_executables{'telnet'} = '@TELNET@';



# Read plugin configurations
{
    my $dir = '@plugindir@';
    opendir(CFGDIR, $dir) or die("Cannot open directory $dir: $!");
    my @files = grep { /\.init\.pl$/ } readdir(CFGDIR);
    closedir( CFGDIR );
    foreach my $file ( @files )
    {
        require $dir . '/' . $file;
    }
}


# Initialize shell command modules
{
    foreach my $module ( sort @Gerty::cli_loadmodules )
    {        
        my $cmd_class = 'Gerty::Runcmd::' . $module;
        eval(sprintf('require %s', $cmd_class));
        if( $@ )
        {
            print STDERR "Error loading " . $cmd_class . ": " . $@ . "\n";
            exit 1;
        }
    }

    foreach my $cmd ( sort keys %Gerty::cmd_registry )
    {
        foreach my $attr ('opts', 'arguments', 'execute', 'help')
        {
            if( not defined( $Gerty::cmd_registry{$cmd}{$attr} ) )
            {
                printf STDERR
                    ("Error initializing command %s: %s is missing\n",
                     $cmd, $attr);
                exit(1);
            }
        }
    }    
}
        


my $ok = 1;
my $cmd = shift @ARGV;
if( not defined $cmd )
{
    $ok = 0;
}
elsif( not defined( $Gerty::cmd_registry{$cmd} ) )
{
    $ok = 0;
    print STDERR "Unknown command: $cmd\n";
}

if( not $ok )
{
    print STDERR
        "Usage: $0 CMD [options]...\n",
        "Available commands:\n",
        "    " . join("\n    ", sort keys %Gerty::cmd_registry) . "\n",
        "Common options:\n",
        "    --verbose       print extra diagnostics\n",
        "    --debug         print debugging information\n",
        "    --deblvl=N      debug level [1]\n",
        "    --help          print the command usage help text\n";
    
    exit 1;
}


my $debug = 0;
$Gerty::debug_level = 1;
my $verbose = 0;
my $help_needed;

$ok = GetOptions(
                 'verbose'      => \$verbose,
                 'debug'        => \$debug,
                 'deblvl=i'     => \$Gerty::debug_level,
                 'help'         => \$help_needed,
                 %{$Gerty::cmd_registry{$cmd}{'opts'}}
                 );

if( not $ok or $help_needed or
    scalar( @ARGV ) != $Gerty::cmd_registry{$cmd}{'arguments'} )
{
    print STDERR $Gerty::cmd_registry{$cmd}{'help'} . "\n";
    exit 1;
}


# Set up logging
$Gerty::log = new Log::Handler;



if( $debug )
{
    $Gerty::log->add
        ( screen => {
            log_to   => "STDERR",
            maxlevel => "debug",
            minlevel => "emergency",
        });
}
elsif( $verbose )
{
    $Gerty::log->add
        ( screen => {
            log_to   => "STDERR",
            maxlevel => "info",
            minlevel => "emergency",
        });    
}
else
{
    $Gerty::log->add
        ( screen => {
            log_to   => "STDERR",
            maxlevel => "warning",
            minlevel => "emergency",
        });    
}


$ok = &{$Gerty::cmd_registry{$cmd}{'execute'}}( @ARGV );

exit($ok ? 0:1);


# Local Variables:
# mode: perl
# indent-tabs-mode: nil
# perl-indent-level: 4
# End:
